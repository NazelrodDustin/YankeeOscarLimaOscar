<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init.
player = noone;
playerNumber = -1;
playerView = -1;

onScreen = false;
coolDown = 0;

backpackWidth = 6;
backpackHeight = 10;

showTimer = 0;
hideTimer = 0;

posX = 0;
posY = 0;
gridX = 0;
gridY = 0;
tempItem = noone;

var row
for(row = 0; row &lt; backpackHeight; row++;){
    var col
    for(col = 0; col &lt; backpackWidth; col++;){
        invSlot[col,row] = "empty";
    }
}

canPlace = (scr_getInventorySpace(2, 2, 0, 0));
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (onScreen){
    if (instance_exists(player.itemSelected)){  
        if (player.itemSelected != noone){
            player.itemSelected.visible = true;
            player.itemSelected.depth = -100001;
            player.itemSelected.x = (gridX + ((8 * posX) + player.itemSelected.imageOffsetX) + 1);
            player.itemSelected.y = (gridY + ((8 * posY) + player.itemSelected.imageOffsetY) + 1);
            //canPlace = (scr_getInvSpace(player.itemSelected.invSpaceWide, player.itemSelected.invSpaceTall, posX, posY));
            if (gamepad_button_check_released(playerNumber - 1, gp_shoulderl)){
                if (posX &gt; backpackWidth - player.itemSelected.invSpaceTall){
                    posX += ((backpackWidth - player.itemSelected.invSpaceTall) - posX);
                }
                
                if (posY &gt; backpackHeight - player.itemSelected.invSpaceWide){
                    posY += ((backpackHeight - player.itemSelected.invSpaceWide) - posY);
                }
                
                if (player.itemSelected.imageAngle &gt; 0){
                    player.itemSelected.imageAngle -= 1;
                }else{
                    player.itemSelected.imageAngle = 3;
                }
                player.itemSelected.alarm[0] = 1;
                show_debug_message("invSpaceTall " + string(player.itemSelected.invSpaceTall) + " invSpaceWide " + string(player.itemSelected.invSpaceWide));
            }
            
            if (gamepad_button_check_released(playerNumber - 1, gp_shoulderr)){
                if (posX &gt; backpackWidth - player.itemSelected.invSpaceTall){
                    posX += ((backpackWidth - player.itemSelected.invSpaceTall) - posX);
                }
                
                if (posY &gt; backpackHeight - player.itemSelected.invSpaceWide){
                    posY += ((backpackHeight - player.itemSelected.invSpaceWide) - posY);
                }
                
                
                if (player.itemSelected.imageAngle &lt; 3){
                    player.itemSelected.imageAngle += 1;
                }else{
                    player.itemSelected.imageAngle = 0;
                }
                player.itemSelected.alarm[0] = 1;
                scr_showInventory(backpackWidth, backpackHeight);
                show_debug_message("invSpaceTall " + string(player.itemSelected.invSpaceTall) + " invSpaceWide " + string(player.itemSelected.invSpaceWide));
            }
            if (coolDown == 1){
                coolDown = 0;
            }else{
                if (canPlace &amp;&amp; gamepad_button_check_released(playerNumber - 1, gp_face1)){
                    scr_setInventorySpace(player.itemSelected.invSpaceWide, player.itemSelected.invSpaceTall, posX, posY, player.itemSelected.id, true);
                    player.itemSelected.offsetX = posX;
                    player.itemSelected.offsetY = posY;
                    player.itemSelected.inInv = true;
                    tempItem = player.itemSelected; 
                    player.itemSelected = noone;
                    coolDown = 1;
                }
            }
        }
    }
}else{
    if (instance_exists(player)){
        if (instance_exists(player.itemSelected)){
            if (player.itemSelected != noone){
                player.itemSelected.visible = false;
                player.itemSelected.x = -5000;
                player.itemSelected.y = -5000;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(player)){    
    if (onScreen){
            showTimer += 1;
            
            if (showTimer == 1){
                scr_showInventory(backpackWidth, backpackHeight);
                hideTimer = 0;
            }
            
            if (showTimer &gt;= 2){
                showTimer = 2;
            }
            
            gridX = player.x;
            gridY = player.y;
            
            var row
            for(row = 0; row &lt; backpackHeight; row++;){
                var col
                for(col = 0; col &lt; backpackWidth; col++;){
                    var invString = scr_findString(col, row, true);
                    if (invString != "empty" &amp;&amp; invString != "taken by"){
                        invSlot[col,row].x = (gridX + ((invSlot[col,row].offsetX * 8) + invSlot[col,row].imageOffsetX)) + 1;
                        invSlot[col,row].y = (gridY + ((invSlot[col,row].offsetY * 8) + invSlot[col,row].imageOffsetY)) + 1;
                    }
                }
            }  
    }else{
        hideTimer += 1;
        
        if (hideTimer == 1){
            scr_hideInventory(backpackWidth, backpackHeight);
            showTimer = 0;
        }
        
        if (hideTimer &gt;= 2){
            hideTimer = 2;
        }
    }
}else{
    onScreen = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inv control.

if (onScreen){
    if (gamepad_button_check_released(playerNumber - 1, gp_face4)){
        onScreen = false;
    }
    if (instance_exists(player.itemSelected)){
        if (gamepad_button_check_released(playerNumber - 1, gp_padd)){
            if (posY &lt; backpackHeight - player.itemSelected.invSpaceTall){
                posY++;
                canPlace = (scr_getInventorySpace(player.itemSelected.invSpaceWide, player.itemSelected.invSpaceTall, posX, posY));

            }
        }
        
        if (gamepad_button_check_released(playerNumber - 1, gp_padr)){
            if (posX &lt; backpackWidth - player.itemSelected.invSpaceWide){
                posX++;
                canPlace = (scr_getInventorySpace(player.itemSelected.invSpaceWide, player.itemSelected.invSpaceTall, posX, posY));
            
            }
        }
        
        if (gamepad_button_check_released(playerNumber - 1, gp_padu)){
            if (posY &gt; 0){
                posY--;
                canPlace = (scr_getInventorySpace(player.itemSelected.invSpaceWide, player.itemSelected.invSpaceTall, posX, posY));

            }
        }
        
        if (gamepad_button_check_released(playerNumber - 1, gp_padl)){
            if (posX &gt; 0){
                posX--;
                canPlace = (scr_getInventorySpace(player.itemSelected.invSpaceWide, player.itemSelected.invSpaceTall, posX, posY));

            }
        }
    }else{
        if (coolDown == 1){
            coolDown = 0;
        }else{
            if (gamepad_button_check_released(playerNumber - 1, gp_face1)){
                player.itemSelected = invSlot[posX, posY];

                scr_setInventorySpace(player.itemSelected.invSpaceWide, player.itemSelected.invSpaceTall, posX, posY, player.itemSelected, false);
                coolDown = 1;
            }
        }
        
        if (gamepad_button_check_released(playerNumber - 1, gp_padd)){
            if (posY &lt; backpackHeight){
               scr_getNextInventoryItem("y", id, "positive", backpackWidth, backpackHeight);
                
            }
        }
        
        if (gamepad_button_check_released(playerNumber - 1, gp_padr)){
            if (posX &lt; backpackWidth){
                scr_getNextInventoryItem("x", id, "positive", backpackWidth, backpackHeight);
                          
            }
        }
        
        if (gamepad_button_check_released(playerNumber - 1, gp_padu)){
            if (posY &gt; 0){
                scr_getNextInventoryItem("y", id, "negative", backpackWidth, backpackHeight);
                
            }
        }
        
        if (gamepad_button_check_released(playerNumber - 1, gp_padl)){
            if (posX &gt; 0){
                scr_getNextInventoryItem("x", id, "negative", backpackWidth, backpackHeight);
                
            }
        }
    }
}else{
    if (gamepad_button_check_released(playerNumber - 1, gp_face4)){
        onScreen = true;
        if (instance_exists(player.itemSelected)){
            canPlace = (scr_getInventorySpace(player.itemSelected.invSpaceWide, player.itemSelected.invSpaceTall, posX, posY));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (onScreen){

    
    draw_set_colour($ffffff);
    draw_set_alpha(1);
    
    draw_rectangle(gridX, gridY, gridX + (backpackWidth * 8), gridY + (backpackHeight * 8), false);
    
    draw_set_colour($000000);
    
    var row
    
    for(row = 0; row &lt;= backpackHeight; row++){
        draw_line_width(gridX, gridY + (8 * row) , gridX + (backpackWidth * 8), gridY + (8 * row), 2);
    }
    
    var col
    
    for(col = 0; col &lt;= backpackWidth; col++){
        draw_line_width(gridX + (8 * col), gridY , gridX + (8 * col), gridY + (backpackHeight * 8), 2);
    }
    
    
    if instance_exists(player.itemSelected){
        draw_set_alpha(.5);
        
        if (canPlace){
            draw_set_colour(make_colour_rgb(0, 255, 0));
        }else{
            draw_set_colour(make_colour_rgb(255, 127, 127));
        }
        
        draw_rectangle(player.itemSelected.x - player.itemSelected.imageOffsetX, player.itemSelected.y - player.itemSelected.imageOffsetY, (player.itemSelected.x - player.itemSelected.imageOffsetX) + ((player.itemSelected.invSpaceWide * 8) - 1), (player.itemSelected.y - player.itemSelected.imageOffsetY) + ((player.itemSelected.invSpaceTall * 8) - 1), false);
        draw_set_alpha(1);
    }else{
        draw_set_alpha(.5);
        draw_set_colour(make_colour_rgb(90, 90, 90));
        var invString = scr_findString(posX, posY, true)
        //show_debug_message(string(invString));
        if (invString != "empty" &amp;&amp; invString != "taken by"){
            draw_rectangle(invSlot[posX, posY].x - invSlot[posX, posY].imageOffsetX, invSlot[posX, posY].y - invSlot[posX, posY].imageOffsetY, (invSlot[posX, posY].x - invSlot[posX, posY].imageOffsetX) + ((invSlot[posX, posY].invSpaceWide * 8) - 1), (invSlot[posX, posY].y - invSlot[posX, posY].imageOffsetY) + ((invSlot[posX, posY].invSpaceTall * 8) - 1), false);
        }else{
            draw_rectangle(gridX + (posX * 8), gridY + (posY * 8), gridX + ((posX * 8) + 7), gridY + ((posY * 8) + 7), false);
        }
        draw_set_alpha(1);
    }
    
    draw_set_color($000000);
    
    
    var row
    for(row = 0; row &lt; backpackHeight; row++;){
        var col
        for(col = 0; col &lt; backpackWidth; col++;){
            draw_text((player.x - ((display_get_width() / 2)) + (col * 16) + ((16 * 12) * col)), (player.y - (display_get_height() / 2)) + (row * 16), string(row) + " " + string(col) + " " + string(invSlot[col,row]));
        }
    }
    
    
    
    draw_set_colour($ffffff);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
