<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init
depth = -100000000000000000000000000000000000000000000000000000
debug = false;
zoom = 1;
zoomChanged = false;
mouseXOffset = 0;
mouseYOffset = 0;
mouseXPos = 0;
mouseYPos = 0;
viewMult = 100;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view init
playerOne = -1;
playerTwo = -1;

// first player views.
view_visible[0] = true;

//initial view setup

//setting view parameters
view_xview[0] = playerOne.x - (display_get_width() / 8);
view_yview[0] = playerOne.y - (display_get_height() / 4);
view_wview[0] = display_get_width() / 4;
view_hview[0] = display_get_height() / 2;

//setting draw parameters

view_xport[0] = 0;
view_yport[0] = 0;
view_wport[0] = display_get_width() / 2;
view_hport[0] = display_get_height();


//second player views.
view_visible[2] = true;

//initial view setup

//setting view parameters
view_xview[2] = playerTwo.x - (display_get_width() / 8);
view_yview[2] = playerTwo.y - (display_get_height() / 4);
view_wview[2] = display_get_width() / 4;
view_hview[2] = display_get_height() / 2;

//setting draw parameters

view_xport[2] = display_get_width() / 2;
view_yport[2] = 0;
view_wport[2] = display_get_width() / 2;
view_hport[2] = display_get_height();

//debug

view_xview[7] = 0;
view_yview[7] = 0;
view_wview[7] = display_get_width() / zoom;
view_hview[7] = display_get_height() / zoom;

//setting draw parameters

view_xport[7] = 0;
view_yport[7] = 0;
view_wport[7] = display_get_width();
view_hport[7] = display_get_height();



surface_resize(application_surface, display_get_width(), display_get_height());
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///move view
if (debug == true){
        
        view_visible[0] = false;
        view_visible[2] = false;
        view_visible[7] = true;
        
        
        view_wview[7] = display_get_width() / zoom;
        view_hview[7] = display_get_height() / zoom;
        
        //setting draw parameters
    
        view_xport[7] = 0;
        view_yport[7] = 0;
        view_wport[7] = display_get_width();
        view_hport[7] = display_get_height();
        
}else{
    // first player views.
    if (gamepad_is_connected(0) &amp;&amp; gamepad_is_connected(1)){
        
        view_visible[0] = true;
        view_visible[2] = true;
        view_visible[7] = false;
        
        //setting view parameters
        
        view_xview[0] = playerOne.x - (display_get_width() / 8);
        view_yview[0] = playerOne.y - (display_get_height() / 4);
        view_wview[0] = display_get_width() / 4;
        view_hview[0] = display_get_height() / 2;
        
        //setting draw parameters
        
        view_xport[0] = 0;
        view_yport[0] = 0;
        view_wport[0] = display_get_width() / 2;
        view_hport[0] = display_get_height();
        //second player views.
        
        //setting view parameters
        view_xview[2] = playerTwo.x - (display_get_width() / 8);
        view_yview[2] = playerTwo.y - (display_get_height() / 4);
        view_wview[2] = display_get_width() / 4;
        view_hview[2] = display_get_height() / 2;
        
        //setting draw parameters
        
        view_xport[2] = display_get_width() / 2;
        view_yport[2] = 0;
        view_wport[2] = display_get_width() / 2;
        view_hport[2] = display_get_height();
    
    }else if (gamepad_is_connected(0) &amp;&amp; !gamepad_is_connected(1)){
        
        view_visible[0] = true;
        view_visible[2] = false;
        view_visible[7] = false;
        
        //setting view parameters
        
        view_xview[0] = playerOne.x - (display_get_width() / 4);
        view_yview[0] = playerOne.y - (display_get_height() / 4);
        view_wview[0] = display_get_width() / 2;
        view_hview[0] = display_get_height() / 2;
        
        //setting draw parameters
        
        view_xport[0] = 0;
        view_yport[0] = 0;
        view_wport[0] = display_get_width();
        view_hport[0] = display_get_height();
        
    }else if (!gamepad_is_connected(0) &amp;&amp; gamepad_is_connected(1)){
        
        view_visible[0] = false;
        view_visible[2] = true;
        view_visible[7] = false;
        
        //setting view parameters
    
        view_xview[2] = playerTwo.x - (display_get_width() / 4);
        view_yview[2] = playerTwo.y - (display_get_height() / 4);
        view_wview[2] = display_get_width() / 2;
        view_hview[2] = display_get_height() / 2;
        
        //setting draw parameters
        
        view_xport[2] = 0;
        view_yport[2] = 0;
        view_wport[2] = display_get_width();
        view_hport[2] = display_get_height();
    }else{
        debug = true
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///view input
if (debug){
    if (mouse_wheel_up()){
        if (zoom &gt;= 4){
        zoom = 4;
        }else{
            zoomChanged = true;
            mouseXPos = mouse_x - view_xview[7];
            mouseYPos = mouse_y - view_yview[7];
            mouseXOffset = ((mouse_x - view_xview[7]) / zoom);
            mouseYOffset = ((mouse_y - view_yview[7]) / zoom);
            zoom += .1;
        }
    }
    
    if mouse_wheel_down(){
        if (zoom &lt;= .5){
            zoom = .5;
        }else{
            zoomChanged = true;
            mouseXPos = mouse_x - view_xview[7];
            mouseYPos = mouse_y - view_yview[7];
            mouseXOffset = ((mouse_x - view_xview[7]) / zoom);
            mouseYOffset = ((mouse_y - view_yview[7]) / zoom);
            zoom -= .1;
        }
    }
    
    if (zoom &gt;= 4){
        zoom = 4;
    }else if(zoom &lt;= .5){
        zoom = .5;
    }
    
    
    if (keyboard_check_direct(ord("W"))){
        view_yview[7] += -20;
    }
    
    if (keyboard_check_direct(ord("S"))){
        view_yview[7] += 20;
    }
    
    if (keyboard_check_direct(ord("A"))){
        view_xview[7] += -20;
    }
    
    if (keyboard_check_direct(ord("D"))){
        view_xview[7] += 20;
    }
}    

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///object control
if (playerOne.isMoving || playerTwo.isMoving){
    //instance_deactivate_object(obj_water);
}



if (!gamepad_is_connected(0)){
    playerOne.x = -50000;
    playerOne.y = -50000;
    playerOne.resetTimer = 0;
    instance_deactivate_object(playerOne);
}else{
    instance_activate_object(playerOne);
    playerOne.resetTimer += 1;
    
    if (playerOne.resetTimer == 1){
        playerOne.x = playerOne.tempX;
        playerOne.y = playerOne.tempY;
    }
    
    if (playerOne.resetTimer &gt;= 2){
        playerOne.resetTimer = 2;
    }
}

if (!gamepad_is_connected(1)){
    playerTwo.x = -50000;
    playerTwo.y = -50000;
    playerTwo.resetTimer = 0;
    instance_deactivate_object(playerTwo);
}else{
    instance_activate_object(playerTwo);
    playerTwo.resetTimer += 1;
    
    if (playerTwo.resetTimer == 1){
        playerTwo.x = playerTwo.tempX;
        playerTwo.y = playerTwo.tempY;
    }
    
    if (playerTwo.resetTimer &gt;= 2){
        playerTwo.resetTimer = 2;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///chunks
var rangeMult = 1.5;

if (view_visible[0] &amp;&amp; (obj_gameControl.playerOne).isMoving){
    instance_activate_region(view_xview[0] - (obj_worldGen.chunkSize * rangeMult),view_yview[0] - (obj_worldGen.chunkSize * rangeMult), view_wview[0] + ((obj_worldGen.chunkSize * rangeMult) * 2),view_hview[0] + ((obj_worldGen.chunkSize * rangeMult) * 2), 1);
}

if (view_visible[2] &amp;&amp; (obj_gameControl.playerTwo).isMoving){
    instance_activate_region(view_xview[2] - (obj_worldGen.chunkSize * rangeMult),view_yview[2] - (obj_worldGen.chunkSize * rangeMult), view_wview[2] + ((obj_worldGen.chunkSize * rangeMult) * 2),view_hview[2] + ((obj_worldGen.chunkSize * rangeMult) * 2), 1);
}

if (view_visible[7]){
    instance_activate_region(view_xview[0] - (obj_worldGen.chunkSize * 2),view_yview[0] - (obj_worldGen.chunkSize * 3), view_wview[0] + ((obj_worldGen.chunkSize * 3) * 2),view_hview[0] + ((obj_worldGen.chunkSize * 3) * 2), 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (zoomChanged){
    view_xview[7] += (mouseXOffset * zoom) - mouseXPos;
    view_yview[7] += (mouseYOffset * zoom) - mouseYPos;
    zoomChanged = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_colour($0088ff)    

draw_text(view_xview[0],view_yview[0],string(instance_number(obj_foliageChunkParent)));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="104">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[7] = playerTwo.x - (view_wview[7] / 2);
view_yview[7] = playerTwo.y - (view_hview[7] / 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="103">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[7] = playerOne.x - (view_wview[7] / 2);
view_yview[7] = playerOne.y - (view_hview[7] / 2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
