<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///init.
drawController = 0;

isMoving = 0;
playerNumber = 0;
inaccuracy = 0;
force = 0;
arrowShot = 0
gamepadLeftHorizontal = gamepad_axis_value(playerNumber - 1, gp_axislh);
gamepadLeftVertical = gamepad_axis_value(playerNumber - 1, gp_axislv);

gamepadRightHorizontal = gamepad_axis_value(playerNumber - 1, gp_axisrh);
gamepadRightVertical = gamepad_axis_value(playerNumber - 1, gp_axisrv);
enemy = 0;

movementSpeed = 30;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///movement
depth = -y;
gamepadLeftHorizontal = gamepad_axis_value(playerNumber - 1, gp_axislh);
gamepadLeftVertical = gamepad_axis_value(playerNumber - 1, gp_axislv);

gamepadRightHorizontal = gamepad_axis_value(playerNumber - 1, gp_axisrh);
gamepadRightVertical = gamepad_axis_value(playerNumber - 1, gp_axisrv);

hspeed = gamepadLeftHorizontal * movementSpeed;
vspeed = gamepadLeftVertical * movementSpeed;

if (vspeed != 0 || hspeed != 0){
    isMoving = 1;        
}else{
    isMoving = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shoot arrow
if (arrowShot = 0){
    if (gamepad_button_check(playerNumber - 1, gp_shoulderrb)){
        force += .2;
        if (force &gt;= 3){
            force = 3;
            inaccuracy += .1
        }
        if (inaccuracy &gt;= 6){
            inaccuracy = 6;        
        }
    }
    if (gamepad_button_check_released(playerNumber - 1, gp_shoulderrb)){
        arrowShot = instance_create(self.x, self.y, obj_arrow);
        arrowShot.shooter = self.id;
        if (hspeed != 0 || vspeed != 0){
            inaccuracy += 6;
        }
        arrowShot.image_angle = self.image_angle + irandom_range(-inaccuracy / 2, inaccuracy / 2);
        arrowShot.force = force;
        force = 0;
        inaccuracy = 0;
        
        sound = irandom(3);
        
        switch sound{
            case 0:
                audio_play_sound_at(snd_arrowFire0, self.x, self.y, self.depth, 1, 20, 5, false, 3)
            case 1:
                audio_play_sound_at(snd_arrowFire1, self.x, self.y, self.depth, 1, 20, 5, false, 3)
            case 2:
                audio_play_sound_at(snd_arrowFire2, self.x, self.y, self.depth, 1, 20, 5, false, 3)
            case 3:
                audio_play_sound_at(snd_arrowFire3, self.x, self.y, self.depth, 1, 20, 5, false, 3)
            default:
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check for dead enemy

if (collision_circle(self.x, self.y, 16, obj_enemyParent, true, true)){
    enemy = (collision_circle(self.x, self.y, 16, obj_enemyParent, true, true));
    if (enemy.state = "dead"){
        drawController.drawDeadText = true;
        drawController.enemy = enemy;
    }else{
        drawController.drawDeadText = false;
    }
}else{
    enemy = 0;
    drawController.drawDeadText = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (playerNumber = 1){
    image_blend = make_colour_rgb(0, 117, 225);
}else if (playerNumber = 2){
    image_blend = make_colour_rgb(255, 117, 0);  
}else{
    image_blend = make_colour_rgb(255, 225, 225);
}

if (gamepadRightHorizontal != 0 || gamepadRightVertical != 0){
    image_angle = point_direction(self.x, self.y, self.x + gamepadRightHorizontal, self.y + gamepadRightVertical);
}else if (gamepadLeftHorizontal != 0 || gamepadLeftVertical != 0){
    image_angle = point_direction(self.x, self.y, self.x + gamepadLeftHorizontal, self.y + gamepadLeftVertical);
}
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="35">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>movementSpeed = get_integer("New player speed", 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
